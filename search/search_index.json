{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview & Getting Started Description This is a website app that intended to work as a student study helper, that target to support features like flashcards, notetaking, learning from flashcards, pomodoro timer, personal To-Do list, and many more. Check out project GitHub Repo for more information. QuickStart: Setting up server This app is intend to serve multiple users with one server running, and each user will just signup on first use, and login when using the created account. To set up a server, please follow the instructions below. Clone the GitHub Repo % git clone https://github.com/HoaTNNguyen/Study2Success.git Install latest Python3.9 Go into the project main directory % cd Study2Success It's recommended to create a virtual environment so we can make sure we have correct packages % pip3 install venv % python3 -m venv venv % source venv/bin/activate Install all the packages from requirements.txt % pip3 install -r requirements.txt Simply run the server now! % python3 app/run.py Contributors @Hoa Nguyen @Ngan Ngo @Jerusalem Ilag @Abdullah Waheed Directory structure . \u251c\u2500\u2500 app # Source code for applications | \u251c\u2500\u2500 myapp | | \u251c\u2500\u2500 static # CSS stylesheets, images, and javascript files needed for the app | | \u251c\u2500\u2500 templates # contains all html files | | | \u251c\u2500\u2500 ... | | \u251c\u2500\u2500 __init__.py # Set up flask and import library server | | \u251c\u2500\u2500 forms.py # holds the code of all WTForms | | \u251c\u2500\u2500 mdparser.py # holds the code helps extract markdown content into a list of Flashcards | | \u251c\u2500\u2500 models.py # holds a list of Class that each representing the database table | | \u251c\u2500\u2500 models_enum.py # Enum representing friend status in database | | \u251c\u2500\u2500 models_methods.py # Functions returning all friends of a specified user | | \u2514\u2500\u2500 routes.py # hods all the routes of the app | \u2514\u2500\u2500 run.py \u251c\u2500\u2500 docs # Documentation folder (also used by [mkdocs](https://www.mkdocs.org) \u251c\u2500\u2500 etc # Contains all example files upload \u251c\u2500\u2500 mkdocs.yml # Configuration file for mkdocs \u2514\u2500\u2500 requirements.txt # Dependency python packages Specifications This is a project work in progress, for more information, please check out the specifications document .","title":"Overview & Getting Started"},{"location":"index.html#overview-getting-started","text":"","title":"Overview &amp; Getting Started"},{"location":"index.html#description","text":"This is a website app that intended to work as a student study helper, that target to support features like flashcards, notetaking, learning from flashcards, pomodoro timer, personal To-Do list, and many more. Check out project GitHub Repo for more information.","title":"Description"},{"location":"index.html#quickstart-setting-up-server","text":"This app is intend to serve multiple users with one server running, and each user will just signup on first use, and login when using the created account. To set up a server, please follow the instructions below. Clone the GitHub Repo % git clone https://github.com/HoaTNNguyen/Study2Success.git Install latest Python3.9 Go into the project main directory % cd Study2Success It's recommended to create a virtual environment so we can make sure we have correct packages % pip3 install venv % python3 -m venv venv % source venv/bin/activate Install all the packages from requirements.txt % pip3 install -r requirements.txt Simply run the server now! % python3 app/run.py","title":"QuickStart: Setting up server"},{"location":"index.html#contributors","text":"@Hoa Nguyen @Ngan Ngo @Jerusalem Ilag @Abdullah Waheed","title":"Contributors"},{"location":"index.html#directory-structure","text":". \u251c\u2500\u2500 app # Source code for applications | \u251c\u2500\u2500 myapp | | \u251c\u2500\u2500 static # CSS stylesheets, images, and javascript files needed for the app | | \u251c\u2500\u2500 templates # contains all html files | | | \u251c\u2500\u2500 ... | | \u251c\u2500\u2500 __init__.py # Set up flask and import library server | | \u251c\u2500\u2500 forms.py # holds the code of all WTForms | | \u251c\u2500\u2500 mdparser.py # holds the code helps extract markdown content into a list of Flashcards | | \u251c\u2500\u2500 models.py # holds a list of Class that each representing the database table | | \u251c\u2500\u2500 models_enum.py # Enum representing friend status in database | | \u251c\u2500\u2500 models_methods.py # Functions returning all friends of a specified user | | \u2514\u2500\u2500 routes.py # hods all the routes of the app | \u2514\u2500\u2500 run.py \u251c\u2500\u2500 docs # Documentation folder (also used by [mkdocs](https://www.mkdocs.org) \u251c\u2500\u2500 etc # Contains all example files upload \u251c\u2500\u2500 mkdocs.yml # Configuration file for mkdocs \u2514\u2500\u2500 requirements.txt # Dependency python packages","title":"Directory structure"},{"location":"index.html#specifications","text":"This is a project work in progress, for more information, please check out the specifications document .","title":"Specifications"},{"location":"Specification.html","text":"Product Specifications Product Specifications Description Contributors Non-functional Requirements Functional Requirements General Feature Memorizing 1. Input a markdown file and ouput flash cards 2. Share flash cards (add to their account) 3. Mind map of flash cards 4. Change order of flash cards based on how often user got answer correct 5. Create pdf of flash cards to print Notes 1. Render markdown notes 2. Convert markdown notes to pdf 3. Share notes with other people (add to their account) 4. Find text in files 5. Quickly rename files using regular expression 6. Add ability to navigate between notes using this syntax [[this other note]] Time Management 1. Create time blocks 2. Use pomodoro timer 3. Add todo tracker 4. Track hours worked per day Description Date: 09/21/2021 Product Name: Study2Success Problem Statement: TBD Contributors Hoa Nguyen: https://github.com/HoaTNNguyen Ngan Ngo: https://github.com/RachelNgo Jerusalem Ilag: https://github.com/jeruilag Abdullah Waheed: https://github.com/abdullahw1 Non-functional Requirements Password has to be at least 8 characters and 1 number. The app should render a note under 1KB within 1 second in all systems. The app is able to render its layout to different screen sizes (laptop, ipad, phone). Functional Requirements General Feature Ability for users to sign-up, login/logout. Be able to delete account Memorizing 1. Input a markdown file and ouput flash cards DRI: @Hoa Nguyen Summary: User is able to input a markdown file and turn it into flashcards Actors: User Preconditions: User is already logged in User is in Flashcards tab User has a markdown file Triggers: User presses import button Primary Sequence: The app pops up a small window waiting for user to select a markdown file User select a markdown file from their computer The app creates folders of flashcards according to #tag names in the markdown file The app shows new folders Postconditions: Folders of flashcards are created from a markdown file 2. Share flash cards (add to their account) DRI: @Hoa Nguyen Summary: User is able to share their flashcards with other users whom the users already added in their account Actors: User, other user Preconditions: User is already logged in User is in Flashcards tab User has other users in his/her friend list User has flashcards Triggers: User presses share button Primary Sequence: The app shows a drop down list of friends User selects friends that he/she wants to share with User presses share The app send notification to the users who get shared The app let user know that the flashcards has been shared Postconditions: The flashcards are shared and added to other users' repository 3. Mind map of flash cards DRI: @Hoa Nguyen Summary: User is able to mind map their flashcards Actors: User Preconditions: User is already logged in User is in Flashcards tab User has Flashcards Triggers: User presses Create Mindmap button Primary Sequence: The app asks user to select a Mindmap pattern User selects a Mindmap pattern User selects Flashcards to add it in a position in the pattern User presses done button Postconditions: A Mindmap of Flashcards is created 4. Change order of flash cards based on how often user got answer correct DRI: @Hoa Nguyen Summary: The app changes order of Flashcards based on how often user got anser correct whenever the user open a Flashcard folder Actors: User Preconditions: User is logged in User has Flashcards User is in a Flashcards folder User answer at least one Flashcard Triggers: User opens a Flashcard folder Primary Sequence: The app keeps track the number of time the user got answer correct for a Flashcard The app sorts the order of Flashcards based on the number of time the user got answer correct increasingly (Flashcard that is answered less correct will be appeared on the top) Postconditions: The order of Flashcared is sorted based on how often user got answer correct 5. Create pdf of flash cards to print DRI: @Jerusalem Ilag Summary: Create a pdf of flash cards to print Actors: User Preconditions: i. User is already logged in ii. User is in the Flashcards tab iii. User has notes Triggers: User clicks \"Convert to PDF\" Primary Sequence: i. A window of directories pops up ii. User selects where they want to save it to iii. User selects \"Confirm\" Postconditions: The flashcards are saved in .pdf format in the proper location Notes 1. Render markdown notes DRI: @Abdullah Waheed Summary: Create a plain text Actors: User Preconditions: User is logged in input markdown file of flash cards is created Triggers: User selects a note they want to view in detail that allows for markdown text to be converted to html code Primary Sequence: User must select an already created markdown input file User must select what the type of note they want to select. User edits the markdown note file The file is saved Postconditions: User is presented with the rendered markdown notes. 2. Convert markdown notes to pdf DRI: @Abdullah Waheed Summary: User is able to convert and save markdown notes to pdf format. Actors: User Preconditions: User is logged in Markdown note is created Markdown note is rendered Triggers: User selects option to convert to pdf Primary Sequence User is given an options to choose which markdown note they want converted to pdf User inputs option Pdf gets saved Post conditions: The users notes are converted to pdf form. 3. Share notes with other people (add to their account) DRI: @Abdullah Waheed Summary: Users will be able to use feature to share their notes with other users Actors: User Preconditions User is logged in User already has note User knows which note they want to share Triggers: User selects the option to share notes. Primary Sequence: User selects to share note User is given the notes they selected Postconditions: The application will let user know that note has been shared 4. Find text in files DRI: @Abdullah Waheed Summary: Feature will allow for user to key text from files Actors: User Preconditions: User is logged in User has note files Triggers: User searches key text in search menu Primary Sequence: User selects search option User enters keywords Postconditions: User is presented with notes containing searched keywords. 5. Quickly rename files using regular expression DRI: @Jerusalem Ilag Summary: Quickly rename files using regular expressions Actors: User Preconditions: i. User is logged in ii. User has a file Triggers: User clicks \"Rename file\" Primary Sequence: i. User inputs the name they want the file to be called ii. User presses \"Confirm\" Postconditions: i. File now has the new name given by the user 6. Add ability to navigate between notes using this syntax [[this other note]] DRI: @Jerusalem Ilag Summary: Add ability to navigate between notes using this syntax [[this other note]] Actors: User Preconditions: i. User is logged in ii. User is in one of their notes iii. User has multple notes Triggers: User types in [[name of other note]] Primary Sequence: i. User types in [[name of other note]] Postconditions: i. User is now viewing their other note. Time Management 1. Create time blocks DRI: @Ngan Ngo Summary: Feature which users could make blocks of time. Actors: The Users Preconditions: The users has logged in Trigger: Open the \"time blocks\" Primary Sequence: System show users a calendar with dates. Users select a date from a calendar Users create their event title and tasks with a due time. System automatically show up the event in the users's calendar with a block of time. Users log out Postconditions: Users had an event in their calendar 2. Use pomodoro timer DRI: @Ngan Ngo Summary: Feature which users could estimate how many pomodoros each task will take Actors: User Preconditions: The Users has logged in. Trigger: the users open the \"Pomodoro timer\" Primary Sequence: Decide task to be done Set timer to 25 min Work until timer run out Postconditions: The Users would focus on a single task at a time. 3. Add todo tracker DRI: @Ngan Ngo Summary: Feature which users could organize and manage their to-do items Actors: User Preconditions: The Users has logged in. Triggers: The Users select \"To Do Tracker \" option Primary sequence: System prompt the users to do a list. The users make a list, sort them according to their priority. System show the list with the checklist. The Users log out. Postconditions: The Users can add, delete and mark the todo list. 4. Track hours worked per day DRI: @Jerusalem Ilag Summary: User can see how long they have been studying flash cards for Actors: User Preconditions: i. User is already logged in ii. User has flash cards Triggers: User clicks \"How long have I been studying?\" Primary Sequence: i. User clicks the button ii. A time will be displayed with how long the user has had flash cards open for Postconditions: User will know how long they have been studying for that day","title":"Product Specifications"},{"location":"Specification.html#product-specifications","text":"Product Specifications Description Contributors Non-functional Requirements Functional Requirements General Feature Memorizing 1. Input a markdown file and ouput flash cards 2. Share flash cards (add to their account) 3. Mind map of flash cards 4. Change order of flash cards based on how often user got answer correct 5. Create pdf of flash cards to print Notes 1. Render markdown notes 2. Convert markdown notes to pdf 3. Share notes with other people (add to their account) 4. Find text in files 5. Quickly rename files using regular expression 6. Add ability to navigate between notes using this syntax [[this other note]] Time Management 1. Create time blocks 2. Use pomodoro timer 3. Add todo tracker 4. Track hours worked per day","title":"Product Specifications"},{"location":"Specification.html#description","text":"Date: 09/21/2021 Product Name: Study2Success Problem Statement: TBD","title":"Description"},{"location":"Specification.html#contributors","text":"Hoa Nguyen: https://github.com/HoaTNNguyen Ngan Ngo: https://github.com/RachelNgo Jerusalem Ilag: https://github.com/jeruilag Abdullah Waheed: https://github.com/abdullahw1","title":"Contributors"},{"location":"Specification.html#non-functional-requirements","text":"Password has to be at least 8 characters and 1 number. The app should render a note under 1KB within 1 second in all systems. The app is able to render its layout to different screen sizes (laptop, ipad, phone).","title":"Non-functional Requirements"},{"location":"Specification.html#functional-requirements","text":"","title":"Functional Requirements"},{"location":"Specification.html#general-feature","text":"Ability for users to sign-up, login/logout. Be able to delete account","title":"General Feature"},{"location":"Specification.html#memorizing","text":"","title":"Memorizing"},{"location":"Specification.html#1-input-a-markdown-file-and-ouput-flash-cards","text":"DRI: @Hoa Nguyen Summary: User is able to input a markdown file and turn it into flashcards Actors: User Preconditions: User is already logged in User is in Flashcards tab User has a markdown file Triggers: User presses import button Primary Sequence: The app pops up a small window waiting for user to select a markdown file User select a markdown file from their computer The app creates folders of flashcards according to #tag names in the markdown file The app shows new folders Postconditions: Folders of flashcards are created from a markdown file","title":"1. Input a markdown file and ouput flash cards"},{"location":"Specification.html#2-share-flash-cards-add-to-their-account","text":"DRI: @Hoa Nguyen Summary: User is able to share their flashcards with other users whom the users already added in their account Actors: User, other user Preconditions: User is already logged in User is in Flashcards tab User has other users in his/her friend list User has flashcards Triggers: User presses share button Primary Sequence: The app shows a drop down list of friends User selects friends that he/she wants to share with User presses share The app send notification to the users who get shared The app let user know that the flashcards has been shared Postconditions: The flashcards are shared and added to other users' repository","title":"2. Share flash cards (add to their account)"},{"location":"Specification.html#3-mind-map-of-flash-cards","text":"DRI: @Hoa Nguyen Summary: User is able to mind map their flashcards Actors: User Preconditions: User is already logged in User is in Flashcards tab User has Flashcards Triggers: User presses Create Mindmap button Primary Sequence: The app asks user to select a Mindmap pattern User selects a Mindmap pattern User selects Flashcards to add it in a position in the pattern User presses done button Postconditions: A Mindmap of Flashcards is created","title":"3. Mind map of flash cards"},{"location":"Specification.html#4-change-order-of-flash-cards-based-on-how-often-user-got-answer-correct","text":"DRI: @Hoa Nguyen Summary: The app changes order of Flashcards based on how often user got anser correct whenever the user open a Flashcard folder Actors: User Preconditions: User is logged in User has Flashcards User is in a Flashcards folder User answer at least one Flashcard Triggers: User opens a Flashcard folder Primary Sequence: The app keeps track the number of time the user got answer correct for a Flashcard The app sorts the order of Flashcards based on the number of time the user got answer correct increasingly (Flashcard that is answered less correct will be appeared on the top) Postconditions: The order of Flashcared is sorted based on how often user got answer correct","title":"4. Change order of flash cards based on how often user got answer correct"},{"location":"Specification.html#5-create-pdf-of-flash-cards-to-print","text":"DRI: @Jerusalem Ilag Summary: Create a pdf of flash cards to print Actors: User Preconditions: i. User is already logged in ii. User is in the Flashcards tab iii. User has notes Triggers: User clicks \"Convert to PDF\" Primary Sequence: i. A window of directories pops up ii. User selects where they want to save it to iii. User selects \"Confirm\" Postconditions: The flashcards are saved in .pdf format in the proper location","title":"5. Create pdf of flash cards to print"},{"location":"Specification.html#notes","text":"","title":"Notes"},{"location":"Specification.html#1-render-markdown-notes","text":"DRI: @Abdullah Waheed Summary: Create a plain text Actors: User Preconditions: User is logged in input markdown file of flash cards is created Triggers: User selects a note they want to view in detail that allows for markdown text to be converted to html code Primary Sequence: User must select an already created markdown input file User must select what the type of note they want to select. User edits the markdown note file The file is saved Postconditions: User is presented with the rendered markdown notes.","title":"1. Render markdown notes"},{"location":"Specification.html#2-convert-markdown-notes-to-pdf","text":"DRI: @Abdullah Waheed Summary: User is able to convert and save markdown notes to pdf format. Actors: User Preconditions: User is logged in Markdown note is created Markdown note is rendered Triggers: User selects option to convert to pdf Primary Sequence User is given an options to choose which markdown note they want converted to pdf User inputs option Pdf gets saved Post conditions: The users notes are converted to pdf form.","title":"2. Convert markdown notes to pdf"},{"location":"Specification.html#3-share-notes-with-other-people-add-to-their-account","text":"DRI: @Abdullah Waheed Summary: Users will be able to use feature to share their notes with other users Actors: User Preconditions User is logged in User already has note User knows which note they want to share Triggers: User selects the option to share notes. Primary Sequence: User selects to share note User is given the notes they selected Postconditions: The application will let user know that note has been shared","title":"3. Share notes with other people (add to their account)"},{"location":"Specification.html#4-find-text-in-files","text":"DRI: @Abdullah Waheed Summary: Feature will allow for user to key text from files Actors: User Preconditions: User is logged in User has note files Triggers: User searches key text in search menu Primary Sequence: User selects search option User enters keywords Postconditions: User is presented with notes containing searched keywords.","title":"4. Find text in files"},{"location":"Specification.html#5-quickly-rename-files-using-regular-expression","text":"DRI: @Jerusalem Ilag Summary: Quickly rename files using regular expressions Actors: User Preconditions: i. User is logged in ii. User has a file Triggers: User clicks \"Rename file\" Primary Sequence: i. User inputs the name they want the file to be called ii. User presses \"Confirm\" Postconditions: i. File now has the new name given by the user","title":"5. Quickly rename files using regular expression"},{"location":"Specification.html#6-add-ability-to-navigate-between-notes-using-this-syntax-this-other-note","text":"DRI: @Jerusalem Ilag Summary: Add ability to navigate between notes using this syntax [[this other note]] Actors: User Preconditions: i. User is logged in ii. User is in one of their notes iii. User has multple notes Triggers: User types in [[name of other note]] Primary Sequence: i. User types in [[name of other note]] Postconditions: i. User is now viewing their other note.","title":"6. Add ability to navigate between notes using this syntax [[this other note]]"},{"location":"Specification.html#time-management","text":"","title":"Time Management"},{"location":"Specification.html#1-create-time-blocks","text":"DRI: @Ngan Ngo Summary: Feature which users could make blocks of time. Actors: The Users Preconditions: The users has logged in Trigger: Open the \"time blocks\" Primary Sequence: System show users a calendar with dates. Users select a date from a calendar Users create their event title and tasks with a due time. System automatically show up the event in the users's calendar with a block of time. Users log out Postconditions: Users had an event in their calendar","title":"1.  Create time blocks"},{"location":"Specification.html#2-use-pomodoro-timer","text":"DRI: @Ngan Ngo Summary: Feature which users could estimate how many pomodoros each task will take Actors: User Preconditions: The Users has logged in. Trigger: the users open the \"Pomodoro timer\" Primary Sequence: Decide task to be done Set timer to 25 min Work until timer run out Postconditions: The Users would focus on a single task at a time.","title":"2. Use pomodoro timer"},{"location":"Specification.html#3-add-todo-tracker","text":"DRI: @Ngan Ngo Summary: Feature which users could organize and manage their to-do items Actors: User Preconditions: The Users has logged in. Triggers: The Users select \"To Do Tracker \" option Primary sequence: System prompt the users to do a list. The users make a list, sort them according to their priority. System show the list with the checklist. The Users log out. Postconditions: The Users can add, delete and mark the todo list.","title":"3. Add todo tracker"},{"location":"Specification.html#4-track-hours-worked-per-day","text":"DRI: @Jerusalem Ilag Summary: User can see how long they have been studying flash cards for Actors: User Preconditions: i. User is already logged in ii. User has flash cards Triggers: User clicks \"How long have I been studying?\" Primary Sequence: i. User clicks the button ii. A time will be displayed with how long the user has had flash cards open for Postconditions: User will know how long they have been studying for that day","title":"4. Track hours worked per day"},{"location":"Code%20Reference/forms.html","text":"forms.py This module holds the code of all WTForms used in the app The standarn convention of defining a WTForm here is: class MyForm(FlaskForm): # Fields here More detailed WTForm documentations can be found here . FlashCardForm ( FlaskForm ) WTForm for adding a new flashcard Attributes: Name Type Description front Front page of flashcard, usually a question back Back page of flashcard, usually answer to question in the front add Submit field to add card LoginForm ( FlaskForm ) WTForm for login page Attributes: Name Type Description username For user to put his/her registered username password Password field remember_me Remember whether the user ticked \"remember me\" submit Submit field NextButton ( FlaskForm ) WTForm for just a next submit field button Attributes: Name Type Description nextCard Submit button to go to next NoteForm ( FlaskForm ) WTForm for upload markdown file to notes page and later converting to pdf Attributes: Name Type Description name note name note note file submit Submit field to add card NoteShareForm ( FlaskForm ) WTForm for user to select which friend to share note Attributes: Name Type Description dropdown Dropdown to select friend's username share Submit button to share RenderMarkdown ( FlaskForm ) WTForm for user to submit markdown note for rendering and download PDF of it Attributes: Name Type Description pagedown Field for user to enter markdown text submit Submit button for user to Download as pdf SearchForm ( FlaskForm ) WTForm for a search field with submit button Attributes: Name Type Description text Search text button Submit button to confirm search ShareFlashCardForm ( FlaskForm ) WTForm for user to select which friend to share its flashcard Attributes: Name Type Description dropdown Dropdown to select friend's username share Submit button to confirm sharing SignupForm ( FlaskForm ) WTForm for signup page Attributes: Name Type Description email Email user is using to sign up the account username username field password password field password2 confirmation password field submit Submit field validate_email ( self , field ) Make sure the email hasn't been registered Source code in myapp/forms.py def validate_email ( self , field ): \"\"\"Make sure the email hasn't been registered\"\"\" if User . query . filter_by ( email = field . data ) . first (): raise ValidationError ( 'Email already registered' ) UploadMarkdownForm ( FlaskForm ) WTForm for allowing user to upload a markdown file Attributes: Name Type Description file Markdown file field to select markdown file to upload upload Submit button to confirm upload","title":"forms.py"},{"location":"Code%20Reference/forms.html#formspy","text":"This module holds the code of all WTForms used in the app The standarn convention of defining a WTForm here is: class MyForm(FlaskForm): # Fields here More detailed WTForm documentations can be found here .","title":"forms.py"},{"location":"Code%20Reference/forms.html#myapp.forms.FlashCardForm","text":"WTForm for adding a new flashcard Attributes: Name Type Description front Front page of flashcard, usually a question back Back page of flashcard, usually answer to question in the front add Submit field to add card","title":"FlashCardForm"},{"location":"Code%20Reference/forms.html#myapp.forms.LoginForm","text":"WTForm for login page Attributes: Name Type Description username For user to put his/her registered username password Password field remember_me Remember whether the user ticked \"remember me\" submit Submit field","title":"LoginForm"},{"location":"Code%20Reference/forms.html#myapp.forms.NextButton","text":"WTForm for just a next submit field button Attributes: Name Type Description nextCard Submit button to go to next","title":"NextButton"},{"location":"Code%20Reference/forms.html#myapp.forms.NoteForm","text":"WTForm for upload markdown file to notes page and later converting to pdf Attributes: Name Type Description name note name note note file submit Submit field to add card","title":"NoteForm"},{"location":"Code%20Reference/forms.html#myapp.forms.NoteShareForm","text":"WTForm for user to select which friend to share note Attributes: Name Type Description dropdown Dropdown to select friend's username share Submit button to share","title":"NoteShareForm"},{"location":"Code%20Reference/forms.html#myapp.forms.RenderMarkdown","text":"WTForm for user to submit markdown note for rendering and download PDF of it Attributes: Name Type Description pagedown Field for user to enter markdown text submit Submit button for user to Download as pdf","title":"RenderMarkdown"},{"location":"Code%20Reference/forms.html#myapp.forms.SearchForm","text":"WTForm for a search field with submit button Attributes: Name Type Description text Search text button Submit button to confirm search","title":"SearchForm"},{"location":"Code%20Reference/forms.html#myapp.forms.ShareFlashCardForm","text":"WTForm for user to select which friend to share its flashcard Attributes: Name Type Description dropdown Dropdown to select friend's username share Submit button to confirm sharing","title":"ShareFlashCardForm"},{"location":"Code%20Reference/forms.html#myapp.forms.SignupForm","text":"WTForm for signup page Attributes: Name Type Description email Email user is using to sign up the account username username field password password field password2 confirmation password field submit Submit field","title":"SignupForm"},{"location":"Code%20Reference/forms.html#myapp.forms.SignupForm.validate_email","text":"Make sure the email hasn't been registered Source code in myapp/forms.py def validate_email ( self , field ): \"\"\"Make sure the email hasn't been registered\"\"\" if User . query . filter_by ( email = field . data ) . first (): raise ValidationError ( 'Email already registered' )","title":"validate_email()"},{"location":"Code%20Reference/forms.html#myapp.forms.UploadMarkdownForm","text":"WTForm for allowing user to upload a markdown file Attributes: Name Type Description file Markdown file field to select markdown file to upload upload Submit button to confirm upload","title":"UploadMarkdownForm"},{"location":"Code%20Reference/mdparser.html","text":"mdparser.py md2flashcard ( data ) Uses regular expressions to extract a list of flashcards from markdown text data. Parameters: Name Type Description Default data Markdown text data required Returns: Type Description dict A dictionary with its key are the \"section name\" and their value would be their corresponding list of flashcard tuple (with front&back attributes). Source code in myapp/mdparser.py def md2flashcard ( data ): \"\"\"Uses regular expressions to extract a list of flashcards from markdown text data. Arguments: data: Markdown text data Returns: dict: A dictionary with its key are the \"section name\" and their value would be their corresponding list of flashcard tuple (with front&back attributes). \"\"\" sections = {} for section_name , section_content in _parse_header ( data ): cards = _parse_individual_card_syntax ( section_content ) \\ + _parse_tabular_card_syntax ( section_content ) sections [ section_name ] = cards return sections","title":"mdparser.py"},{"location":"Code%20Reference/mdparser.html#mdparserpy","text":"","title":"mdparser.py"},{"location":"Code%20Reference/mdparser.html#myapp.mdparser.md2flashcard","text":"Uses regular expressions to extract a list of flashcards from markdown text data. Parameters: Name Type Description Default data Markdown text data required Returns: Type Description dict A dictionary with its key are the \"section name\" and their value would be their corresponding list of flashcard tuple (with front&back attributes). Source code in myapp/mdparser.py def md2flashcard ( data ): \"\"\"Uses regular expressions to extract a list of flashcards from markdown text data. Arguments: data: Markdown text data Returns: dict: A dictionary with its key are the \"section name\" and their value would be their corresponding list of flashcard tuple (with front&back attributes). \"\"\" sections = {} for section_name , section_content in _parse_header ( data ): cards = _parse_individual_card_syntax ( section_content ) \\ + _parse_tabular_card_syntax ( section_content ) sections [ section_name ] = cards return sections","title":"md2flashcard()"},{"location":"Code%20Reference/models.html","text":"models.py This modules holds a list of Class that each representing the database table/model. The standard convention of defining a table here is: class MyTable(db.Model): # Table Columns/Relationships here More detailed flask-sqlalchemy documentations can be found here . More detailed sqlalchemy documentations can be found here . FlashCard ( Model ) Saves FlashCards of users Attributes: Name Type Description id Primary key front String column, Front page text back String column, Back page text learned Integer column, track how many times user learned this card user_id id of owner user of this flashcard sharings relationship to a all sharing information of this flashcard Friend ( Model ) Database table representing friend status This table only save relationship between two user, and whether their friend status is pending/friend. If they are neither, their user_id won't show up in pair in this database. When a user adds one person as friend, it will be marked as pending, user1 below is always the one that sent the friend request, and user2 would be the one accepting/rejecting it. Once accepted, their friend status becomes 'FRIEND' Attributes: Name Type Description id Primary key user1_id Integer column, the sender of friend request user2_id Integer column, the receiver of friend request status Indicate whether friend request is still \"PENDING\" or already a \"FRIEND\" Note ( Model ) Database table for notes Attributes: Name Type Description id Primary key name String column, title of note data text column, containing files data User id if user who added notes SharedFlashCard ( Model ) Saves sharing information of flashcards Attributes: Name Type Description id Primary key datetime Datetime column, time of sharing flashcard_id Integer column, id of flashcard that is shared owner_user_id Integer column, id of person sharing the card target_user_id Integer column, id of person that was shared with the card SharedNote ( Model ) Saves sharing information of notes Attributes: Name Type Description id Primary key datetime Datetime column, time of sharing note_id Integer column, id of note that is shared owner_user_id Integer column, id of person sharing the note target_user_id Integer column, id of person that was shared with the note Todo ( Model ) Saves ToDo lists of users Attributes: Name Type Description id Primary key title String column, save the title of things to do complete Boolean column, mark whether that item is completed User ( UserMixin , Model ) Database table holding main user data, and hold relationships to other tables Attributes: Name Type Description id Primary key email String column, hold email of user, this has to be unique username String column, hold username of user, this has to be unique password Hashed password of user avatar Avatar image blob of user, default will be chosen if not defined flashcards Relationship that points to all flashcards of this user friends1 Relationship that points to Friend table's user1 friends2 Relationship that points to Friend table's user2 __init__ ( self , ** kwargs ) special A simple constructor that allows initialization from kwargs. Sets attributes on the constructed instance using the names and values in kwargs . Only keys that are present as attributes of the instance's class are allowed. These could be, for example, any mapped columns or relationships.","title":"models.py"},{"location":"Code%20Reference/models.html#modelspy","text":"This modules holds a list of Class that each representing the database table/model. The standard convention of defining a table here is: class MyTable(db.Model): # Table Columns/Relationships here More detailed flask-sqlalchemy documentations can be found here . More detailed sqlalchemy documentations can be found here .","title":"models.py"},{"location":"Code%20Reference/models.html#myapp.models.FlashCard","text":"Saves FlashCards of users Attributes: Name Type Description id Primary key front String column, Front page text back String column, Back page text learned Integer column, track how many times user learned this card user_id id of owner user of this flashcard sharings relationship to a all sharing information of this flashcard","title":"FlashCard"},{"location":"Code%20Reference/models.html#myapp.models.Friend","text":"Database table representing friend status This table only save relationship between two user, and whether their friend status is pending/friend. If they are neither, their user_id won't show up in pair in this database. When a user adds one person as friend, it will be marked as pending, user1 below is always the one that sent the friend request, and user2 would be the one accepting/rejecting it. Once accepted, their friend status becomes 'FRIEND' Attributes: Name Type Description id Primary key user1_id Integer column, the sender of friend request user2_id Integer column, the receiver of friend request status Indicate whether friend request is still \"PENDING\" or already a \"FRIEND\"","title":"Friend"},{"location":"Code%20Reference/models.html#myapp.models.Note","text":"Database table for notes Attributes: Name Type Description id Primary key name String column, title of note data text column, containing files data User id if user who added notes","title":"Note"},{"location":"Code%20Reference/models.html#myapp.models.SharedFlashCard","text":"Saves sharing information of flashcards Attributes: Name Type Description id Primary key datetime Datetime column, time of sharing flashcard_id Integer column, id of flashcard that is shared owner_user_id Integer column, id of person sharing the card target_user_id Integer column, id of person that was shared with the card","title":"SharedFlashCard"},{"location":"Code%20Reference/models.html#myapp.models.SharedNote","text":"Saves sharing information of notes Attributes: Name Type Description id Primary key datetime Datetime column, time of sharing note_id Integer column, id of note that is shared owner_user_id Integer column, id of person sharing the note target_user_id Integer column, id of person that was shared with the note","title":"SharedNote"},{"location":"Code%20Reference/models.html#myapp.models.Todo","text":"Saves ToDo lists of users Attributes: Name Type Description id Primary key title String column, save the title of things to do complete Boolean column, mark whether that item is completed","title":"Todo"},{"location":"Code%20Reference/models.html#myapp.models.User","text":"Database table holding main user data, and hold relationships to other tables Attributes: Name Type Description id Primary key email String column, hold email of user, this has to be unique username String column, hold username of user, this has to be unique password Hashed password of user avatar Avatar image blob of user, default will be chosen if not defined flashcards Relationship that points to all flashcards of this user friends1 Relationship that points to Friend table's user1 friends2 Relationship that points to Friend table's user2","title":"User"},{"location":"Code%20Reference/models.html#myapp.models.User.__init__","text":"A simple constructor that allows initialization from kwargs. Sets attributes on the constructed instance using the names and values in kwargs . Only keys that are present as attributes of the instance's class are allowed. These could be, for example, any mapped columns or relationships.","title":"__init__()"},{"location":"Code%20Reference/models_enum.html","text":"models_enum.py FriendStatusEnum ( Enum ) Enum representing friend status in database Attributes: Name Type Description PENDING Friend request is still pending on someone to approve/reject it FRIEND Friend request was approved and two user is now friend","title":"models_enum.py"},{"location":"Code%20Reference/models_enum.html#models_enumpy","text":"","title":"models_enum.py"},{"location":"Code%20Reference/models_enum.html#myapp.models_enum.FriendStatusEnum","text":"Enum representing friend status in database Attributes: Name Type Description PENDING Friend request is still pending on someone to approve/reject it FRIEND Friend request was approved and two user is now friend","title":"FriendStatusEnum"},{"location":"Code%20Reference/models_methods.html","text":"models_methods.py get_all_friends ( current_user_id ) Function returning all friends of the specified user Parameters: Name Type Description Default current_user_id id of the user that we want to get friends list required Returns: Type Description list A list of tuples with the format (status, other_user) whereas status can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', and other_user is a models.User object. Source code in myapp/models_methods.py def get_all_friends ( current_user_id ): \"\"\"Function returning all friends of the specified user Arguments: current_user_id: id of the user that we want to get friends list Returns: list: A list of tuples with the format `(status, other_user)` whereas `status` can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', and `other_user` is a `models.User` object. \"\"\" result = Friend . query . filter ( ( Friend . user1_id == current_user_id ) \\ | ( Friend . user2_id == current_user_id ) ) . all () friends = [] for x in result : oth_user = x . user2 if x . user1 . id == int ( current_user_id ) else x . user1 if x . status == FriendStatusEnum . FRIEND : status = 'friend' elif x . status == FriendStatusEnum . PENDING : if x . user1 . id == int ( current_user_id ): status = 'pending-sent-request' else : status = 'pending-to-approve' else : raise Exception ( f \"Unknown status { x . status } \" ) friends . append (( status , oth_user )) return friends get_friend_status ( current_user_id , other_user_id ) Function returning friend status between two users Parameters: Name Type Description Default current_user_id id of user1 required other_user_id id of user2 required Returns: Type Description tuple In the format (status, friend_record) whereas status can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', while friend_record is an object of myapp.models.Friend Source code in myapp/models_methods.py def get_friend_status ( current_user_id , other_user_id ): \"\"\"Function returning friend status between two users Arguments: current_user_id: id of user1 other_user_id: id of user2 Returns: tuple: In the format `(status, friend_record)` whereas `status` can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', while friend_record is an object of `myapp.models.Friend` \"\"\" # Get and Check if has pending friend request or already a friend friend_record = Friend . query . filter ( (( Friend . user1_id == current_user_id ) & ( Friend . user2_id == other_user_id )) \\ | (( Friend . user2_id == current_user_id ) & ( Friend . user1_id == other_user_id )) ) . one_or_none () # If found friend record if friend_record : if friend_record . status == FriendStatusEnum . FRIEND : status = 'friend' elif friend_record . status == FriendStatusEnum . PENDING : if friend_record . user1 . id == int ( current_user_id ): # Current user sent the request status = 'pending-sent-request' else : # The other user sent the request, current user needs to approve status = 'pending-to-approve' else : raise Exception ( f \"Unknown status { friend_record . status } \" ) else : # No record, not friend/pending, neutral status = 'neutral' return status , friend_record","title":"models_methods.py"},{"location":"Code%20Reference/models_methods.html#models_methodspy","text":"","title":"models_methods.py"},{"location":"Code%20Reference/models_methods.html#myapp.models_methods.get_all_friends","text":"Function returning all friends of the specified user Parameters: Name Type Description Default current_user_id id of the user that we want to get friends list required Returns: Type Description list A list of tuples with the format (status, other_user) whereas status can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', and other_user is a models.User object. Source code in myapp/models_methods.py def get_all_friends ( current_user_id ): \"\"\"Function returning all friends of the specified user Arguments: current_user_id: id of the user that we want to get friends list Returns: list: A list of tuples with the format `(status, other_user)` whereas `status` can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', and `other_user` is a `models.User` object. \"\"\" result = Friend . query . filter ( ( Friend . user1_id == current_user_id ) \\ | ( Friend . user2_id == current_user_id ) ) . all () friends = [] for x in result : oth_user = x . user2 if x . user1 . id == int ( current_user_id ) else x . user1 if x . status == FriendStatusEnum . FRIEND : status = 'friend' elif x . status == FriendStatusEnum . PENDING : if x . user1 . id == int ( current_user_id ): status = 'pending-sent-request' else : status = 'pending-to-approve' else : raise Exception ( f \"Unknown status { x . status } \" ) friends . append (( status , oth_user )) return friends","title":"get_all_friends()"},{"location":"Code%20Reference/models_methods.html#myapp.models_methods.get_friend_status","text":"Function returning friend status between two users Parameters: Name Type Description Default current_user_id id of user1 required other_user_id id of user2 required Returns: Type Description tuple In the format (status, friend_record) whereas status can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', while friend_record is an object of myapp.models.Friend Source code in myapp/models_methods.py def get_friend_status ( current_user_id , other_user_id ): \"\"\"Function returning friend status between two users Arguments: current_user_id: id of user1 other_user_id: id of user2 Returns: tuple: In the format `(status, friend_record)` whereas `status` can be either string of 'friend', 'pending-sent-request', 'pending-to-approve', while friend_record is an object of `myapp.models.Friend` \"\"\" # Get and Check if has pending friend request or already a friend friend_record = Friend . query . filter ( (( Friend . user1_id == current_user_id ) & ( Friend . user2_id == other_user_id )) \\ | (( Friend . user2_id == current_user_id ) & ( Friend . user1_id == other_user_id )) ) . one_or_none () # If found friend record if friend_record : if friend_record . status == FriendStatusEnum . FRIEND : status = 'friend' elif friend_record . status == FriendStatusEnum . PENDING : if friend_record . user1 . id == int ( current_user_id ): # Current user sent the request status = 'pending-sent-request' else : # The other user sent the request, current user needs to approve status = 'pending-to-approve' else : raise Exception ( f \"Unknown status { friend_record . status } \" ) else : # No record, not friend/pending, neutral status = 'neutral' return status , friend_record","title":"get_friend_status()"},{"location":"Code%20Reference/routes.html","text":"routes.py This module holds all the flask routes of our app (all URL paths) and incharge of the frontend for rendering html templates. The standarn convention of defining a route here is: @myapp_obj.route(\"/my-route\") def my_route(): # Code here return render_template(\"my_route.html\") Or we could redirect to an existing route using: @myapp_obj.route(\"/my-route1\") def my_route1(): # Code here return redirect(url_for(\"my_route\")) Detailed flask documentation can be found here . account () User's account page, redirect if need to change avatar Source code in myapp/routes.py @myapp_obj . route ( \"/account\" ) @login_required def account (): \"\"\"User's account page, redirect if need to change avatar\"\"\" return render_template ( \"/account.html\" , avatars = AVATAR_IMGS ) addTodo () Add ToDo item into ToDo list, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/addTodo\" , methods = [ \"POST\" ]) @login_required def addTodo (): \"\"\"Add ToDo item into ToDo list, then redirect back to show ToDo list\"\"\" title = request . form . get ( \"title\" ) new_todo = Todo ( title = title , user_id = current_user . get_id (), complete = False ) db . session . add ( new_todo ) db . session . commit () return redirect ( url_for ( \"myTodo\" )) add_flashcard () Add flashcard page route, allow user to use FlashCardForm to add a new flashcard Source code in myapp/routes.py @myapp_obj . route ( \"/add-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def add_flashcard (): \"\"\"Add flashcard page route, allow user to use FlashCardForm to add a new flashcard\"\"\" form = FlashCardForm () if form . validate_on_submit (): card = FlashCard ( front = form . front . data , back = form . back . data , view = 0 , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( \"Flashcard has been created\" , \"success\" ) return redirect ( url_for ( \"add_flashcard\" )) return render_template ( \"/add-flashcard.html\" , form = form ) add_friend_userid_provided ( user_id ) A route for handling an add friend request, this will redirect back to MyFriends page Source code in myapp/routes.py @myapp_obj . route ( \"/add-friend/<int:user_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def add_friend_userid_provided ( user_id ): \"\"\"A route for handling an add friend request, this will redirect back to MyFriends page\"\"\" # Abort if adding self as friend if int ( current_user . get_id ()) == user_id : return abort ( 404 , description = \"Cannot add yourself as friend\" ) status , friend_record = get_friend_status ( current_user . get_id (), user_id ) if status == 'friend' : # Already a friend, do nothing pass elif status == 'pending-sent-request' : # Current user sent a request, do nothing flash ( f 'Friend request already sent to \" { friend_record . user2 . username } \"' , \"warning\" ) elif status == 'pending-to-approve' : # Other user sent the request, approve (Change status from pending to approved) friend_record . status = FriendStatusEnum . FRIEND db . session . add ( friend_record ) db . session . commit () flash ( f 'Approved friend request from \" { friend_record . user1 . username } \"' ) elif status == 'neutral' : # No friendship record found, send friend request user = User . query . filter_by ( id = user_id ) . one () friend = Friend ( user1_id = current_user . get_id (), user2_id = user . id , status = FriendStatusEnum . PENDING ) db . session . add ( friend ) db . session . commit () flash ( f 'Sent friend request to \" { user . username } \"' ) else : abort ( 404 , description = f \"Unknown status { status } \" ) return redirect ( url_for ( \"show_friends\" )) change_avatar ( avatar_id ) To switch avatar pictures and more, then redirect back to account Source code in myapp/routes.py @myapp_obj . route ( \"/change_avatar/<int:avatar_id>\" ) @login_required def change_avatar ( avatar_id ): \"\"\"To switch avatar pictures and more, then redirect back to account\"\"\" if avatar_id in AVATAR_IMGS : avatar_path = os . path . join ( basedir , f './static/ { AVATAR_IMGS [ avatar_id ] } ' ) if os . path . exists ( avatar_path ): user = current_user . _get_current_object () with open ( avatar_path , 'rb' ) as fp : user . avatar = fp . read () # Modify avatar blob db . session . commit () else : raise Exception ( f \"Avatar { avatar_path } doesn't exists\" ) return redirect ( url_for ( \"account\" )) deleteTodo ( todo_id ) Remove ToDo item from ToDo list, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/deleteTodo/<int:todo_id>\" ) @login_required def deleteTodo ( todo_id ): \"\"\"Remove ToDo item from ToDo list, then redirect back to show ToDo list\"\"\" todo = Todo . query . filter_by ( id = todo_id , user_id = current_user . get_id ()) . first () db . session . delete ( todo ) db . session . commit () return redirect ( url_for ( \"myTodo\" )) download_flashcard_as_pdf () Download Flashcards to a single PDF file, then it will redirect user back to My Flashcards Source code in myapp/routes.py @myapp_obj . route ( \"/download-flashcard-as-pdf\" , methods = [ 'GET' , 'POST' ]) @login_required def download_flashcard_as_pdf (): \"\"\"Download Flashcards to a single PDF file, then it will redirect user back to My Flashcards\"\"\" ordered_cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned ) . all () # Handle case of no flashcard if not ordered_cards : abort ( 404 , description = \"No flashcards found, cannot download as pdf\" ) # Generate markdown content cards = [] for idx , card in enumerate ( ordered_cards ): # Generate a markdown card for each card cards . append ( f ' \\n --- \\n\\n ** { card . front } ** \\n\\n ? \\n\\n { card . back } \\n\\n --- \\n\\n ' ) cards_text = ' \\n ' . join ( cards ) md_text = '## Flashcards \\n\\n ' + cards_text # Covert to html html = markdown . markdown ( md_text ) with tempfile . TemporaryDirectory () as temp_dir : pdf_filename = os . path . join ( temp_dir , 'flashcards.pdf' ) # Convert html to pdf with open ( pdf_filename , \"wb+\" ) as fp : pisa_status = pisa . CreatePDF ( html , dest = fp ) return send_file ( pdf_filename , as_attachment = True ) download_note_as_pdf ( note_id ) Route will allow for html note to be downloaded as pdf in the md file in a pdf directory Source code in myapp/routes.py @myapp_obj . route ( \"/download-note-as-pdf/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def download_note_as_pdf ( note_id ): '''Route will allow for html note to be downloaded as pdf in the md file in a pdf directory''' note = Note . query . filter_by ( id = note_id , user_id = current_user . get_id ()) . one_or_none () if not note : abort ( 404 , description = f \"Note with id { note_id } doesn't exists\" ) html_text = markdown . markdown ( note . data ) output_filename = note . name . split ( \".md\" ) output_filename = output_filename [ 0 ] + '.pdf' with tempfile . TemporaryDirectory () as temp_dir : pdf_filename = os . path . join ( temp_dir , output_filename ) # Convert html to pdf with open ( pdf_filename , \"wb+\" ) as fp : pisa_status = pisa . CreatePDF ( html_text , dest = fp ) return send_file ( pdf_filename , as_attachment = True ) flashcards_sharing () A route for viewing sharing status of flashcards (both shared to others and others shared to me) Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing (): \"\"\"A route for viewing sharing status of flashcards (both shared to others and others shared to me)\"\"\" owner_flashcards = SharedFlashCard . query . filter_by ( owner_user_id = current_user . get_id ()) . all () target_flashcards = SharedFlashCard . query . filter_by ( target_user_id = current_user . get_id ()) . all () return render_template ( \"flashcards-sharing.html\" , owner_flashcards = owner_flashcards , target_flashcards = target_flashcards ) flashcards_sharing_add_to_myflashcards ( sharing_id ) A route for adding shared flashcard that other user shared into My FlashCards Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing/add-to-myflashcards/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing_add_to_myflashcards ( sharing_id ): \"\"\"A route for adding shared flashcard that other user shared into My FlashCards\"\"\" sharing = SharedFlashCard . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) card = FlashCard ( front = sharing . flashcard . front , back = sharing . flashcard . back , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( f 'Copied flashcard(# { sharing . flashcard . id } ) to \"My Flashcards\", new flashcard(# { card . id } )' ) return redirect ( url_for ( 'flashcards_sharing' )) flashcards_sharing_cancel_sharing ( sharing_id ) A route for cancelling a flashcard sharing Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing/cancel-sharing/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing_cancel_sharing ( sharing_id ): \"\"\"A route for cancelling a flashcard sharing\"\"\" sharing = SharedFlashCard . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) flash ( f 'Sharing of flashcard(# { sharing . flashcard . id } ) cancelled' ) db . session . delete ( sharing ) db . session . commit () return redirect ( url_for ( 'flashcards_sharing' )) home () Homepage route Source code in myapp/routes.py @myapp_obj . route ( \"/\" ) def home (): \"\"\"Homepage route\"\"\" return render_template ( \"homepage.html\" ) import_flashcard () Import Flashcard route, for user to import markdown file into flashcard Source code in myapp/routes.py @myapp_obj . route ( \"/import-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def import_flashcard (): \"\"\"Import Flashcard route, for user to import markdown file into flashcard\"\"\" form = UploadMarkdownForm () if form . validate_on_submit (): f = form . file . data content = f . stream . read () . decode ( 'ascii' ) for section , flashcards in md2flashcard ( content ) . items (): # TODO: Save flashcard by section for flashcard in flashcards : card = FlashCard ( front = flashcard . front , back = flashcard . back , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( f 'Uploaded file { f . filename } into flashcards' ) return redirect ( url_for ( \"show_flashcard\" )) return render_template ( \"import-flashcard.html\" , form = form ) learn_flashcard () Learn Flashcard route, for user to learn from all it's existing flashcards in My Flashcards Source code in myapp/routes.py @myapp_obj . route ( \"/learn-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def learn_flashcard (): \"\"\"Learn Flashcard route, for user to learn from all it's existing flashcards in My Flashcards\"\"\" first_card = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned , FlashCard . view ) . first () cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . all () # list of cards that the current user has if len ( cards ) < 4 : flash ( \"You must have at least 4 flashcards. Please create more flashcards\" , \"warning\" ) return redirect ( url_for ( \"add_flashcard\" )) form = ObjectiveForm () formNext = NextButton () list_id = _shuffle_choices ( first_card , cards ) choice = [ FlashCard . query . get ( x ) for x in list_id ] correct_choice = None if form . validate_on_submit (): if form . A . data : if form . A . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . B . data : if form . B . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . C . data : if form . C . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . D . data : if form . D . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False # If form submitted if correct_choice is not None : # If correct choice if correct_choice : flash ( 'Excellent' , \"success\" ) correct_choice = first_card . back # Pass this to html template so it will render this as card instead of ABCD options first_card . learned += 1 db . session . commit () else : flash ( 'opps. Wrong answer' , \"error\" ) else : if formNext . validate_on_submit (): first_card . view += 1 db . session . commit () return redirect ( url_for ( \"learn_flashcard\" )) form . A . label . text = choice [ 0 ] . back form . B . label . text = choice [ 1 ] . back form . C . label . text = choice [ 2 ] . back form . D . label . text = choice [ 3 ] . back return render_template ( \"learn-flashcard.html\" , first_card = first_card , form = form , formNext = formNext , choice = choice , list_id = list_id , correct_choice = correct_choice ) log () User logged in route, this redirects to homepage Source code in myapp/routes.py @myapp_obj . route ( \"/loggedin\" ) @login_required def log (): \"\"\"User logged in route, this redirects to homepage\"\"\" return render_template ( \"/homepage.html\" ) login () Login page route Source code in myapp/routes.py @myapp_obj . route ( \"/login\" , methods = [ 'GET' , 'POST' ]) def login (): \"\"\"Login page route\"\"\" if current_user . is_authenticated : return redirect ( url_for ( \"log\" )) form = LoginForm () if form . validate_on_submit (): user = User . query . filter_by ( username = form . username . data ) . first () if user is not None and user . check_password ( form . password . data ): login_user ( user , remember = form . remember_me . data ) flash ( f 'Logged in as User \" { form . username . data } \", remember_me= { form . remember_me . data } ' ) next_page = request . args . get ( 'next' ) return redirect ( next_page ) if next_page else redirect ( url_for ( \"log\" )) else : flash ( \"Login invalid username or password!\" , \"error\" ) return redirect ( '/login' ) return render_template ( \"login.html\" , form = form ) logout () User logged out route, this logout the user and redirects to homepage Source code in myapp/routes.py @myapp_obj . route ( \"/logout\" ) @login_required def logout (): \"\"\"User logged out route, this logout the user and redirects to homepage\"\"\" logout_user () return redirect ( url_for ( \"home\" )) myTodo () Show ToDo list route Source code in myapp/routes.py @myapp_obj . route ( \"/todo\" ) @login_required def myTodo (): \"\"\"Show ToDo list route\"\"\" todo_list = Todo . query . filter_by ( user_id = current_user . get_id ()) . all () return render_template ( \"todo.html\" , todo_list = todo_list ) notes_sharing () A route for viewing sharing status of notes (both shared to others and others shared to me) Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing (): \"\"\"A route for viewing sharing status of notes (both shared to others and others shared to me)\"\"\" owner_notes = SharedNote . query . filter_by ( owner_user_id = current_user . get_id ()) . all () target_notes = SharedNote . query . filter_by ( target_user_id = current_user . get_id ()) . all () return render_template ( \"notes-sharing.html\" , owner_notes = owner_notes , target_notes = target_notes ) notes_sharing_add_to_mynotes ( sharing_id ) A route for adding shared note that other user shared into My Notes Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing/add-to-mynotes/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing_add_to_mynotes ( sharing_id ): \"\"\"A route for adding shared note that other user shared into My Notes\"\"\" sharing = SharedNote . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) note = Note ( name = sharing . note . name , data = sharing . note . data , user_id = current_user . get_id ()) db . session . add ( note ) db . session . commit () flash ( f 'Copied note(# { sharing . note . id } ) to \"My Notes\", new note(# { note . id } )' ) return redirect ( url_for ( 'notes_sharing' )) notes_sharing_cancel_sharing ( sharing_id ) A route for cancelling a flashcard sharing Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing/cancel-sharing/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing_cancel_sharing ( sharing_id ): \"\"\"A route for cancelling a flashcard sharing\"\"\" sharing = SharedNote . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) flash ( f 'Sharing of note(# { sharing . note . id } ) cancelled' ) db . session . delete ( sharing ) db . session . commit () return redirect ( url_for ( 'notes_sharing' )) page_not_found ( e ) Handler error404 and print out description of error Source code in myapp/routes.py @myapp_obj . errorhandler ( 404 ) def page_not_found ( e ): \"\"\"Handler error404 and print out description of error\"\"\" return jsonify ( error = str ( e )), 404 remove_flashcard ( flashcard_id ) A route to remove a flashcard from user's MyFlashCard, this will redirect back to My Flashcards after removing the specified card Source code in myapp/routes.py @myapp_obj . route ( \"/remove-flashcard/<int:flashcard_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def remove_flashcard ( flashcard_id ): \"\"\"A route to remove a flashcard from user's MyFlashCard, this will redirect back to My Flashcards after removing the specified card \"\"\" flashcard = FlashCard . query . filter_by ( id = flashcard_id ) . one_or_none () if flashcard : flash ( f 'Deleted flashcard front=\" { flashcard . front } \", back=\" { flashcard . back } \"' ) db . session . delete ( flashcard ) db . session . commit () return redirect ( url_for ( \"show_flashcard\" )) remove_friend_userid_provided ( user_id ) A route for handling cancel sent friend request and reject freind request, this will then redirect back to MyFriends page Source code in myapp/routes.py @myapp_obj . route ( \"/remove-friend/<int:user_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def remove_friend_userid_provided ( user_id ): \"\"\"A route for handling cancel sent friend request and reject freind request, this will then redirect back to MyFriends page \"\"\" # Abort if removing self as friend if int ( current_user . get_id ()) == user_id : return abort ( 404 , description = \"Cannot remove yourself from friend\" ) status , friend_record = get_friend_status ( current_user . get_id (), user_id ) if friend_record : other_user = friend_record . user1 . username if friend_record . user1 . id != int ( current_user . get_id ()) else friend_record . user2 . username if status == 'friend' : flash ( f 'Removed \" { other_user } \" from friend' ) elif status == 'pending-sent-request' : flash ( f 'Unsent friend request to \" { other_user } \"' ) elif status == 'pending-to-approve' : flash ( f 'Rejected friend request from \" { other_user } \"' ) elif status == 'neutral' : pass # Do nothing else : abort ( 404 , description = f 'Unknown status { status } ' ) db . session . delete ( friend_record ) db . session . commit () return redirect ( url_for ( \"show_friends\" )) render () Route for user to render markdwon notes Source code in myapp/routes.py @myapp_obj . route ( \"/render\" , methods = [ 'GET' , 'POST' ]) @login_required def render (): \"\"\"Route for user to render markdwon notes\"\"\" form = RenderMarkdown () text = None if form . validate_on_submit (): text = form . pagedown . data else : form . pagedown . data = ( 'Enter Markdown ' ) return render_template ( 'upload_md.html' , form = form , text = text ) return render_template ( \"homepage.html\" ) share_flashcard ( flashcard_id ) A route for user to use the ShareFlashCardForm to select which friend they want to share the specified flashcard with. Source code in myapp/routes.py @myapp_obj . route ( \"/share-flashcard/<int:flashcard_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def share_flashcard ( flashcard_id ): \"\"\"A route for user to use the ShareFlashCardForm to select which friend they want to share the specified flashcard with. \"\"\" flashcard = FlashCard . query . filter_by ( id = flashcard_id ) . one_or_none () if not flashcard : abort ( 404 , Description = f 'Unable to find flashcard with id { flashcard_id } ' ) friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : # Only find friends friends . append ( oth_user ) form = ShareFlashCardForm () form . dropdown . choices = [( u . id , u . username ) for u in friends ] if form . validate_on_submit (): user = User . query . filter_by ( id = form . dropdown . data ) . one () now = datetime . now () share_card = SharedFlashCard ( flashcard_id = flashcard_id , datetime = now , owner_user_id = current_user . get_id (), target_user_id = user . id ) db . session . add ( share_card ) db . session . commit () flash ( f 'Shared flashcard(# { flashcard_id } ) to \" { user . username } \" on { str ( now ) } ' ) return redirect ( url_for ( \"show_flashcard\" )) return render_template ( \"share-flashcard.html\" , flashcard = flashcard , form = form ) share_note ( note_id ) route will allow user to share note to other users(friends) Source code in myapp/routes.py @myapp_obj . route ( \"/share-notes/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def share_note ( note_id ): ''' route will allow user to share note to other users(friends)''' note = Note . query . filter_by ( id = note_id ) . one_or_none () friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : # Only find friends friends . append ( oth_user ) form = NoteShareForm () form . dropdown . choices = [( u . id , u . username ) for u in friends ] if form . validate_on_submit (): user = User . query . filter_by ( id = form . dropdown . data ) . one () now = datetime . now () shared_note = SharedNote ( note_id = note_id , datetime = now , owner_user_id = current_user . get_id (), target_user_id = user . id ) db . session . add ( shared_note ) db . session . commit () flash ( f 'Shared note \" { shared_note . note . name } \" to \" { user . username } \" on { str ( datetime . now ()) } ' ) return redirect ( url_for ( \"show_notes\" )) return render_template ( \"share-notes.html\" , note = note , form = form ) show_flashcard () My Flashcard route, to show all flashcard of current user by order based on how often user got answer correct Source code in myapp/routes.py @myapp_obj . route ( \"/my-flashcards\" ) @login_required def show_flashcard (): \"\"\"My Flashcard route, to show all flashcard of current user by order based on how often user got answer correct\"\"\" ordered_cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned ) . all () if not ordered_cards : flash ( \"You don't have any flashcards. Please create one\" , \"warning\" ) return redirect ( url_for ( \"add_flashcard\" )) return render_template ( \"my-flashcards.html\" , ordered_cards = ordered_cards ) show_friends () My Friends route for viewing all friends and accepting/rejecting pending friend requests Source code in myapp/routes.py @myapp_obj . route ( \"/my-friends\" , methods = [ 'GET' , 'POST' ]) @login_required def show_friends (): \"\"\"My Friends route for viewing all friends and accepting/rejecting pending friend requests\"\"\" # Handle show all friends friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : buttons = [( f '/remove-friend/ { oth_user . id } ' , 'Remove Friend' , 'btn-outline-danger' )] #Tuple in the format (link, text, button_type) print_status = 'Friend' elif status == 'pending-sent-request' : buttons = [( f '/remove-friend/ { oth_user . id } ' , 'Unsend' , 'btn-outline-warning' )] print_status = 'Sent' elif status == 'pending-to-approve' : buttons = [( f '/add-friend/ { oth_user . id } ' , 'Approve' , 'btn-outline-success' ), ( f '/remove-friend/ { oth_user . id } ' , 'Reject' , 'btn-outline-danger' ) ] print_status = 'Pending' else : abort ( 404 , f 'Unknown status { status } ' ) friends . append (( oth_user , print_status , buttons )) # Handle Add user found_users = [] search_form = SearchForm () if search_form . validate_on_submit (): search_str = search_form . text . data result = User . query . filter ( User . username . contains ( search_str ) & ( User . id != ( current_user . get_id ()))) . all () for user in result : status , _ = get_friend_status ( current_user . get_id (), user . id ) if status == 'friend' : buttons = [( f '/remove-friend/ { user . id } ' , 'Remove Friend' , 'btn-outline-danger' )] elif status == 'pending-sent-request' : buttons = [( f '/remove-friend/ { user . id } ' , 'Unsend' , 'btn-outline-warning' )] elif status == 'pending-to-approve' : buttons = [( f '/add-friend/ { user . id } ' , 'Approve' , 'btn-outline-success' ), ( f '/remove-friend/ { user . id } ' , 'Reject' , 'btn-outline-danger' ) ] elif status == 'neutral' : buttons = [( f '/add-friend/ { user . id } ' , 'Add Friend' , 'btn-outline-info' )] else : abort ( 404 , description = f 'Unknown status { status } ' ) found_users . append (( user . username , buttons )) return render_template ( \"my-friends.html\" , friends = friends , search_form = search_form , found_users = found_users ) show_notes () Route to view a users notes Source code in myapp/routes.py @myapp_obj . route ( \"/note\" , methods = [ 'GET' , 'POST' ]) @login_required def show_notes (): \"\"\" Route to view a users notes\"\"\" return redirect ( url_for ( 'view_notes' , note_id = 0 )) # note_id 0 indicate no note to view signup () Signup page route Source code in myapp/routes.py @myapp_obj . route ( \"/signup\" , methods = [ 'GET' , 'POST' ]) def signup (): \"\"\"Signup page route\"\"\" if current_user . is_authenticated : return redirect ( url_for ( \"log\" )) form = SignupForm () if form . validate_on_submit (): hashed_password = generate_password_hash ( form . password . data ) user = User ( email = form . email . data , username = form . username . data , password = hashed_password ) db . session . add ( user ) db . session . commit () flash ( \"Your account has been created. You can now login\" ) return redirect ( url_for ( \"home\" )) return render_template ( \"signup.html\" , form = form ) tomato () Show Pomodoro timer route Source code in myapp/routes.py @myapp_obj . route ( \"/pomodoro\" ) def tomato (): \"\"\"Show Pomodoro timer route\"\"\" return render_template ( \"/pomodoro.html\" ) updateTodo ( todo_id ) Mark ToDo item to complete/not complete, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/updateTodo/<int:todo_id>\" ) @login_required def updateTodo ( todo_id ): \"\"\"Mark ToDo item to complete/not complete, then redirect back to show ToDo list\"\"\" todo = Todo . query . filter_by ( id = todo_id , user_id = current_user . get_id ()) . first () todo . complete = not todo . complete db . session . commit () return redirect ( url_for ( \"myTodo\" )) upload_note () Import note route, for user to import markdown file into note Source code in myapp/routes.py @myapp_obj . route ( \"/upload-note\" , methods = [ 'GET' , 'POST' ]) @login_required def upload_note (): \"\"\"Import note route, for user to import markdown file into note\"\"\" form = UploadMarkdownForm () if form . validate_on_submit (): n = form . file . data filename = n . filename content = n . stream . read () . decode ( 'ascii' ) note = Note ( name = filename , data = content , user_id = current_user . get_id ()) db . session . add ( note ) db . session . commit () flash ( f 'Uploaded note { filename } ' ) return redirect ( url_for ( \"show_notes\" )) return render_template ( \"import-note.html\" , form = form ) view_notes ( note_id ) Route to view note, this is similar to show_notes Source code in myapp/routes.py @myapp_obj . route ( \"/viewNote/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def view_notes ( note_id ): '''Route to view note, this is similar to show_notes ''' note = None html_text = None posted_notes = [] search_text = request . form . get ( 'text' ) user_id = current_user . get_id () search_form = SearchForm () if search_text : notes = Note . query . filter_by ( user_id = current_user . get_id ()) . filter ( Note . data . contains ( search_text )) . all () if notes : flash ( f ' { len ( notes ) } search results found' ) else : flash ( 'No search results found' , \"error\" ) else : notes = Note . query . filter_by ( user_id = current_user . get_id ()) . all () if note_id != 0 : note = Note . query . filter_by ( id = note_id , user_id = current_user . get_id ()) . one_or_none () html_text = markdown . markdown ( note . data ) for x in notes : posted_notes = posted_notes + [{ 'name' : f ' { x . name } ' , 'id' : f ' { x . id } ' }] return render_template ( 'note.html' , title = 'Note' , posted_notes = posted_notes , note = note , html_text = html_text , user_id = user_id , search_form = SearchForm ())","title":"routes.py"},{"location":"Code%20Reference/routes.html#routespy","text":"This module holds all the flask routes of our app (all URL paths) and incharge of the frontend for rendering html templates. The standarn convention of defining a route here is: @myapp_obj.route(\"/my-route\") def my_route(): # Code here return render_template(\"my_route.html\") Or we could redirect to an existing route using: @myapp_obj.route(\"/my-route1\") def my_route1(): # Code here return redirect(url_for(\"my_route\")) Detailed flask documentation can be found here .","title":"routes.py"},{"location":"Code%20Reference/routes.html#myapp.routes.account","text":"User's account page, redirect if need to change avatar Source code in myapp/routes.py @myapp_obj . route ( \"/account\" ) @login_required def account (): \"\"\"User's account page, redirect if need to change avatar\"\"\" return render_template ( \"/account.html\" , avatars = AVATAR_IMGS )","title":"account()"},{"location":"Code%20Reference/routes.html#myapp.routes.addTodo","text":"Add ToDo item into ToDo list, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/addTodo\" , methods = [ \"POST\" ]) @login_required def addTodo (): \"\"\"Add ToDo item into ToDo list, then redirect back to show ToDo list\"\"\" title = request . form . get ( \"title\" ) new_todo = Todo ( title = title , user_id = current_user . get_id (), complete = False ) db . session . add ( new_todo ) db . session . commit () return redirect ( url_for ( \"myTodo\" ))","title":"addTodo()"},{"location":"Code%20Reference/routes.html#myapp.routes.add_flashcard","text":"Add flashcard page route, allow user to use FlashCardForm to add a new flashcard Source code in myapp/routes.py @myapp_obj . route ( \"/add-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def add_flashcard (): \"\"\"Add flashcard page route, allow user to use FlashCardForm to add a new flashcard\"\"\" form = FlashCardForm () if form . validate_on_submit (): card = FlashCard ( front = form . front . data , back = form . back . data , view = 0 , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( \"Flashcard has been created\" , \"success\" ) return redirect ( url_for ( \"add_flashcard\" )) return render_template ( \"/add-flashcard.html\" , form = form )","title":"add_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.add_friend_userid_provided","text":"A route for handling an add friend request, this will redirect back to MyFriends page Source code in myapp/routes.py @myapp_obj . route ( \"/add-friend/<int:user_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def add_friend_userid_provided ( user_id ): \"\"\"A route for handling an add friend request, this will redirect back to MyFriends page\"\"\" # Abort if adding self as friend if int ( current_user . get_id ()) == user_id : return abort ( 404 , description = \"Cannot add yourself as friend\" ) status , friend_record = get_friend_status ( current_user . get_id (), user_id ) if status == 'friend' : # Already a friend, do nothing pass elif status == 'pending-sent-request' : # Current user sent a request, do nothing flash ( f 'Friend request already sent to \" { friend_record . user2 . username } \"' , \"warning\" ) elif status == 'pending-to-approve' : # Other user sent the request, approve (Change status from pending to approved) friend_record . status = FriendStatusEnum . FRIEND db . session . add ( friend_record ) db . session . commit () flash ( f 'Approved friend request from \" { friend_record . user1 . username } \"' ) elif status == 'neutral' : # No friendship record found, send friend request user = User . query . filter_by ( id = user_id ) . one () friend = Friend ( user1_id = current_user . get_id (), user2_id = user . id , status = FriendStatusEnum . PENDING ) db . session . add ( friend ) db . session . commit () flash ( f 'Sent friend request to \" { user . username } \"' ) else : abort ( 404 , description = f \"Unknown status { status } \" ) return redirect ( url_for ( \"show_friends\" ))","title":"add_friend_userid_provided()"},{"location":"Code%20Reference/routes.html#myapp.routes.change_avatar","text":"To switch avatar pictures and more, then redirect back to account Source code in myapp/routes.py @myapp_obj . route ( \"/change_avatar/<int:avatar_id>\" ) @login_required def change_avatar ( avatar_id ): \"\"\"To switch avatar pictures and more, then redirect back to account\"\"\" if avatar_id in AVATAR_IMGS : avatar_path = os . path . join ( basedir , f './static/ { AVATAR_IMGS [ avatar_id ] } ' ) if os . path . exists ( avatar_path ): user = current_user . _get_current_object () with open ( avatar_path , 'rb' ) as fp : user . avatar = fp . read () # Modify avatar blob db . session . commit () else : raise Exception ( f \"Avatar { avatar_path } doesn't exists\" ) return redirect ( url_for ( \"account\" ))","title":"change_avatar()"},{"location":"Code%20Reference/routes.html#myapp.routes.deleteTodo","text":"Remove ToDo item from ToDo list, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/deleteTodo/<int:todo_id>\" ) @login_required def deleteTodo ( todo_id ): \"\"\"Remove ToDo item from ToDo list, then redirect back to show ToDo list\"\"\" todo = Todo . query . filter_by ( id = todo_id , user_id = current_user . get_id ()) . first () db . session . delete ( todo ) db . session . commit () return redirect ( url_for ( \"myTodo\" ))","title":"deleteTodo()"},{"location":"Code%20Reference/routes.html#myapp.routes.download_flashcard_as_pdf","text":"Download Flashcards to a single PDF file, then it will redirect user back to My Flashcards Source code in myapp/routes.py @myapp_obj . route ( \"/download-flashcard-as-pdf\" , methods = [ 'GET' , 'POST' ]) @login_required def download_flashcard_as_pdf (): \"\"\"Download Flashcards to a single PDF file, then it will redirect user back to My Flashcards\"\"\" ordered_cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned ) . all () # Handle case of no flashcard if not ordered_cards : abort ( 404 , description = \"No flashcards found, cannot download as pdf\" ) # Generate markdown content cards = [] for idx , card in enumerate ( ordered_cards ): # Generate a markdown card for each card cards . append ( f ' \\n --- \\n\\n ** { card . front } ** \\n\\n ? \\n\\n { card . back } \\n\\n --- \\n\\n ' ) cards_text = ' \\n ' . join ( cards ) md_text = '## Flashcards \\n\\n ' + cards_text # Covert to html html = markdown . markdown ( md_text ) with tempfile . TemporaryDirectory () as temp_dir : pdf_filename = os . path . join ( temp_dir , 'flashcards.pdf' ) # Convert html to pdf with open ( pdf_filename , \"wb+\" ) as fp : pisa_status = pisa . CreatePDF ( html , dest = fp ) return send_file ( pdf_filename , as_attachment = True )","title":"download_flashcard_as_pdf()"},{"location":"Code%20Reference/routes.html#myapp.routes.download_note_as_pdf","text":"Route will allow for html note to be downloaded as pdf in the md file in a pdf directory Source code in myapp/routes.py @myapp_obj . route ( \"/download-note-as-pdf/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def download_note_as_pdf ( note_id ): '''Route will allow for html note to be downloaded as pdf in the md file in a pdf directory''' note = Note . query . filter_by ( id = note_id , user_id = current_user . get_id ()) . one_or_none () if not note : abort ( 404 , description = f \"Note with id { note_id } doesn't exists\" ) html_text = markdown . markdown ( note . data ) output_filename = note . name . split ( \".md\" ) output_filename = output_filename [ 0 ] + '.pdf' with tempfile . TemporaryDirectory () as temp_dir : pdf_filename = os . path . join ( temp_dir , output_filename ) # Convert html to pdf with open ( pdf_filename , \"wb+\" ) as fp : pisa_status = pisa . CreatePDF ( html_text , dest = fp ) return send_file ( pdf_filename , as_attachment = True )","title":"download_note_as_pdf()"},{"location":"Code%20Reference/routes.html#myapp.routes.flashcards_sharing","text":"A route for viewing sharing status of flashcards (both shared to others and others shared to me) Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing (): \"\"\"A route for viewing sharing status of flashcards (both shared to others and others shared to me)\"\"\" owner_flashcards = SharedFlashCard . query . filter_by ( owner_user_id = current_user . get_id ()) . all () target_flashcards = SharedFlashCard . query . filter_by ( target_user_id = current_user . get_id ()) . all () return render_template ( \"flashcards-sharing.html\" , owner_flashcards = owner_flashcards , target_flashcards = target_flashcards )","title":"flashcards_sharing()"},{"location":"Code%20Reference/routes.html#myapp.routes.flashcards_sharing_add_to_myflashcards","text":"A route for adding shared flashcard that other user shared into My FlashCards Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing/add-to-myflashcards/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing_add_to_myflashcards ( sharing_id ): \"\"\"A route for adding shared flashcard that other user shared into My FlashCards\"\"\" sharing = SharedFlashCard . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) card = FlashCard ( front = sharing . flashcard . front , back = sharing . flashcard . back , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( f 'Copied flashcard(# { sharing . flashcard . id } ) to \"My Flashcards\", new flashcard(# { card . id } )' ) return redirect ( url_for ( 'flashcards_sharing' ))","title":"flashcards_sharing_add_to_myflashcards()"},{"location":"Code%20Reference/routes.html#myapp.routes.flashcards_sharing_cancel_sharing","text":"A route for cancelling a flashcard sharing Source code in myapp/routes.py @myapp_obj . route ( \"/flashcards-sharing/cancel-sharing/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def flashcards_sharing_cancel_sharing ( sharing_id ): \"\"\"A route for cancelling a flashcard sharing\"\"\" sharing = SharedFlashCard . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) flash ( f 'Sharing of flashcard(# { sharing . flashcard . id } ) cancelled' ) db . session . delete ( sharing ) db . session . commit () return redirect ( url_for ( 'flashcards_sharing' ))","title":"flashcards_sharing_cancel_sharing()"},{"location":"Code%20Reference/routes.html#myapp.routes.home","text":"Homepage route Source code in myapp/routes.py @myapp_obj . route ( \"/\" ) def home (): \"\"\"Homepage route\"\"\" return render_template ( \"homepage.html\" )","title":"home()"},{"location":"Code%20Reference/routes.html#myapp.routes.import_flashcard","text":"Import Flashcard route, for user to import markdown file into flashcard Source code in myapp/routes.py @myapp_obj . route ( \"/import-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def import_flashcard (): \"\"\"Import Flashcard route, for user to import markdown file into flashcard\"\"\" form = UploadMarkdownForm () if form . validate_on_submit (): f = form . file . data content = f . stream . read () . decode ( 'ascii' ) for section , flashcards in md2flashcard ( content ) . items (): # TODO: Save flashcard by section for flashcard in flashcards : card = FlashCard ( front = flashcard . front , back = flashcard . back , learned = 0 , user = current_user . _get_current_object ()) db . session . add ( card ) db . session . commit () flash ( f 'Uploaded file { f . filename } into flashcards' ) return redirect ( url_for ( \"show_flashcard\" )) return render_template ( \"import-flashcard.html\" , form = form )","title":"import_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.learn_flashcard","text":"Learn Flashcard route, for user to learn from all it's existing flashcards in My Flashcards Source code in myapp/routes.py @myapp_obj . route ( \"/learn-flashcard\" , methods = [ 'GET' , 'POST' ]) @login_required def learn_flashcard (): \"\"\"Learn Flashcard route, for user to learn from all it's existing flashcards in My Flashcards\"\"\" first_card = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned , FlashCard . view ) . first () cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . all () # list of cards that the current user has if len ( cards ) < 4 : flash ( \"You must have at least 4 flashcards. Please create more flashcards\" , \"warning\" ) return redirect ( url_for ( \"add_flashcard\" )) form = ObjectiveForm () formNext = NextButton () list_id = _shuffle_choices ( first_card , cards ) choice = [ FlashCard . query . get ( x ) for x in list_id ] correct_choice = None if form . validate_on_submit (): if form . A . data : if form . A . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . B . data : if form . B . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . C . data : if form . C . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False elif form . D . data : if form . D . raw_data [ 0 ] == first_card . back : correct_choice = True else : correct_choice = False # If form submitted if correct_choice is not None : # If correct choice if correct_choice : flash ( 'Excellent' , \"success\" ) correct_choice = first_card . back # Pass this to html template so it will render this as card instead of ABCD options first_card . learned += 1 db . session . commit () else : flash ( 'opps. Wrong answer' , \"error\" ) else : if formNext . validate_on_submit (): first_card . view += 1 db . session . commit () return redirect ( url_for ( \"learn_flashcard\" )) form . A . label . text = choice [ 0 ] . back form . B . label . text = choice [ 1 ] . back form . C . label . text = choice [ 2 ] . back form . D . label . text = choice [ 3 ] . back return render_template ( \"learn-flashcard.html\" , first_card = first_card , form = form , formNext = formNext , choice = choice , list_id = list_id , correct_choice = correct_choice )","title":"learn_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.log","text":"User logged in route, this redirects to homepage Source code in myapp/routes.py @myapp_obj . route ( \"/loggedin\" ) @login_required def log (): \"\"\"User logged in route, this redirects to homepage\"\"\" return render_template ( \"/homepage.html\" )","title":"log()"},{"location":"Code%20Reference/routes.html#myapp.routes.login","text":"Login page route Source code in myapp/routes.py @myapp_obj . route ( \"/login\" , methods = [ 'GET' , 'POST' ]) def login (): \"\"\"Login page route\"\"\" if current_user . is_authenticated : return redirect ( url_for ( \"log\" )) form = LoginForm () if form . validate_on_submit (): user = User . query . filter_by ( username = form . username . data ) . first () if user is not None and user . check_password ( form . password . data ): login_user ( user , remember = form . remember_me . data ) flash ( f 'Logged in as User \" { form . username . data } \", remember_me= { form . remember_me . data } ' ) next_page = request . args . get ( 'next' ) return redirect ( next_page ) if next_page else redirect ( url_for ( \"log\" )) else : flash ( \"Login invalid username or password!\" , \"error\" ) return redirect ( '/login' ) return render_template ( \"login.html\" , form = form )","title":"login()"},{"location":"Code%20Reference/routes.html#myapp.routes.logout","text":"User logged out route, this logout the user and redirects to homepage Source code in myapp/routes.py @myapp_obj . route ( \"/logout\" ) @login_required def logout (): \"\"\"User logged out route, this logout the user and redirects to homepage\"\"\" logout_user () return redirect ( url_for ( \"home\" ))","title":"logout()"},{"location":"Code%20Reference/routes.html#myapp.routes.myTodo","text":"Show ToDo list route Source code in myapp/routes.py @myapp_obj . route ( \"/todo\" ) @login_required def myTodo (): \"\"\"Show ToDo list route\"\"\" todo_list = Todo . query . filter_by ( user_id = current_user . get_id ()) . all () return render_template ( \"todo.html\" , todo_list = todo_list )","title":"myTodo()"},{"location":"Code%20Reference/routes.html#myapp.routes.notes_sharing","text":"A route for viewing sharing status of notes (both shared to others and others shared to me) Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing (): \"\"\"A route for viewing sharing status of notes (both shared to others and others shared to me)\"\"\" owner_notes = SharedNote . query . filter_by ( owner_user_id = current_user . get_id ()) . all () target_notes = SharedNote . query . filter_by ( target_user_id = current_user . get_id ()) . all () return render_template ( \"notes-sharing.html\" , owner_notes = owner_notes , target_notes = target_notes )","title":"notes_sharing()"},{"location":"Code%20Reference/routes.html#myapp.routes.notes_sharing_add_to_mynotes","text":"A route for adding shared note that other user shared into My Notes Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing/add-to-mynotes/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing_add_to_mynotes ( sharing_id ): \"\"\"A route for adding shared note that other user shared into My Notes\"\"\" sharing = SharedNote . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) note = Note ( name = sharing . note . name , data = sharing . note . data , user_id = current_user . get_id ()) db . session . add ( note ) db . session . commit () flash ( f 'Copied note(# { sharing . note . id } ) to \"My Notes\", new note(# { note . id } )' ) return redirect ( url_for ( 'notes_sharing' ))","title":"notes_sharing_add_to_mynotes()"},{"location":"Code%20Reference/routes.html#myapp.routes.notes_sharing_cancel_sharing","text":"A route for cancelling a flashcard sharing Source code in myapp/routes.py @myapp_obj . route ( \"/notes-sharing/cancel-sharing/<int:sharing_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def notes_sharing_cancel_sharing ( sharing_id ): \"\"\"A route for cancelling a flashcard sharing\"\"\" sharing = SharedNote . query . get ( sharing_id ) if int ( current_user . get_id ()) != sharing . owner_user_id and \\ int ( current_user . get_id ()) != sharing . target_user_id : abort ( 404 , description = 'Invalid permission' ) flash ( f 'Sharing of note(# { sharing . note . id } ) cancelled' ) db . session . delete ( sharing ) db . session . commit () return redirect ( url_for ( 'notes_sharing' ))","title":"notes_sharing_cancel_sharing()"},{"location":"Code%20Reference/routes.html#myapp.routes.page_not_found","text":"Handler error404 and print out description of error Source code in myapp/routes.py @myapp_obj . errorhandler ( 404 ) def page_not_found ( e ): \"\"\"Handler error404 and print out description of error\"\"\" return jsonify ( error = str ( e )), 404","title":"page_not_found()"},{"location":"Code%20Reference/routes.html#myapp.routes.remove_flashcard","text":"A route to remove a flashcard from user's MyFlashCard, this will redirect back to My Flashcards after removing the specified card Source code in myapp/routes.py @myapp_obj . route ( \"/remove-flashcard/<int:flashcard_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def remove_flashcard ( flashcard_id ): \"\"\"A route to remove a flashcard from user's MyFlashCard, this will redirect back to My Flashcards after removing the specified card \"\"\" flashcard = FlashCard . query . filter_by ( id = flashcard_id ) . one_or_none () if flashcard : flash ( f 'Deleted flashcard front=\" { flashcard . front } \", back=\" { flashcard . back } \"' ) db . session . delete ( flashcard ) db . session . commit () return redirect ( url_for ( \"show_flashcard\" ))","title":"remove_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.remove_friend_userid_provided","text":"A route for handling cancel sent friend request and reject freind request, this will then redirect back to MyFriends page Source code in myapp/routes.py @myapp_obj . route ( \"/remove-friend/<int:user_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def remove_friend_userid_provided ( user_id ): \"\"\"A route for handling cancel sent friend request and reject freind request, this will then redirect back to MyFriends page \"\"\" # Abort if removing self as friend if int ( current_user . get_id ()) == user_id : return abort ( 404 , description = \"Cannot remove yourself from friend\" ) status , friend_record = get_friend_status ( current_user . get_id (), user_id ) if friend_record : other_user = friend_record . user1 . username if friend_record . user1 . id != int ( current_user . get_id ()) else friend_record . user2 . username if status == 'friend' : flash ( f 'Removed \" { other_user } \" from friend' ) elif status == 'pending-sent-request' : flash ( f 'Unsent friend request to \" { other_user } \"' ) elif status == 'pending-to-approve' : flash ( f 'Rejected friend request from \" { other_user } \"' ) elif status == 'neutral' : pass # Do nothing else : abort ( 404 , description = f 'Unknown status { status } ' ) db . session . delete ( friend_record ) db . session . commit () return redirect ( url_for ( \"show_friends\" ))","title":"remove_friend_userid_provided()"},{"location":"Code%20Reference/routes.html#myapp.routes.render","text":"Route for user to render markdwon notes Source code in myapp/routes.py @myapp_obj . route ( \"/render\" , methods = [ 'GET' , 'POST' ]) @login_required def render (): \"\"\"Route for user to render markdwon notes\"\"\" form = RenderMarkdown () text = None if form . validate_on_submit (): text = form . pagedown . data else : form . pagedown . data = ( 'Enter Markdown ' ) return render_template ( 'upload_md.html' , form = form , text = text ) return render_template ( \"homepage.html\" )","title":"render()"},{"location":"Code%20Reference/routes.html#myapp.routes.share_flashcard","text":"A route for user to use the ShareFlashCardForm to select which friend they want to share the specified flashcard with. Source code in myapp/routes.py @myapp_obj . route ( \"/share-flashcard/<int:flashcard_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def share_flashcard ( flashcard_id ): \"\"\"A route for user to use the ShareFlashCardForm to select which friend they want to share the specified flashcard with. \"\"\" flashcard = FlashCard . query . filter_by ( id = flashcard_id ) . one_or_none () if not flashcard : abort ( 404 , Description = f 'Unable to find flashcard with id { flashcard_id } ' ) friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : # Only find friends friends . append ( oth_user ) form = ShareFlashCardForm () form . dropdown . choices = [( u . id , u . username ) for u in friends ] if form . validate_on_submit (): user = User . query . filter_by ( id = form . dropdown . data ) . one () now = datetime . now () share_card = SharedFlashCard ( flashcard_id = flashcard_id , datetime = now , owner_user_id = current_user . get_id (), target_user_id = user . id ) db . session . add ( share_card ) db . session . commit () flash ( f 'Shared flashcard(# { flashcard_id } ) to \" { user . username } \" on { str ( now ) } ' ) return redirect ( url_for ( \"show_flashcard\" )) return render_template ( \"share-flashcard.html\" , flashcard = flashcard , form = form )","title":"share_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.share_note","text":"route will allow user to share note to other users(friends) Source code in myapp/routes.py @myapp_obj . route ( \"/share-notes/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def share_note ( note_id ): ''' route will allow user to share note to other users(friends)''' note = Note . query . filter_by ( id = note_id ) . one_or_none () friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : # Only find friends friends . append ( oth_user ) form = NoteShareForm () form . dropdown . choices = [( u . id , u . username ) for u in friends ] if form . validate_on_submit (): user = User . query . filter_by ( id = form . dropdown . data ) . one () now = datetime . now () shared_note = SharedNote ( note_id = note_id , datetime = now , owner_user_id = current_user . get_id (), target_user_id = user . id ) db . session . add ( shared_note ) db . session . commit () flash ( f 'Shared note \" { shared_note . note . name } \" to \" { user . username } \" on { str ( datetime . now ()) } ' ) return redirect ( url_for ( \"show_notes\" )) return render_template ( \"share-notes.html\" , note = note , form = form )","title":"share_note()"},{"location":"Code%20Reference/routes.html#myapp.routes.show_flashcard","text":"My Flashcard route, to show all flashcard of current user by order based on how often user got answer correct Source code in myapp/routes.py @myapp_obj . route ( \"/my-flashcards\" ) @login_required def show_flashcard (): \"\"\"My Flashcard route, to show all flashcard of current user by order based on how often user got answer correct\"\"\" ordered_cards = FlashCard . query . filter_by ( user_id = current_user . get_id ()) . order_by ( FlashCard . learned ) . all () if not ordered_cards : flash ( \"You don't have any flashcards. Please create one\" , \"warning\" ) return redirect ( url_for ( \"add_flashcard\" )) return render_template ( \"my-flashcards.html\" , ordered_cards = ordered_cards )","title":"show_flashcard()"},{"location":"Code%20Reference/routes.html#myapp.routes.show_friends","text":"My Friends route for viewing all friends and accepting/rejecting pending friend requests Source code in myapp/routes.py @myapp_obj . route ( \"/my-friends\" , methods = [ 'GET' , 'POST' ]) @login_required def show_friends (): \"\"\"My Friends route for viewing all friends and accepting/rejecting pending friend requests\"\"\" # Handle show all friends friends = [] for status , oth_user in get_all_friends ( current_user . get_id ()): if status == 'friend' : buttons = [( f '/remove-friend/ { oth_user . id } ' , 'Remove Friend' , 'btn-outline-danger' )] #Tuple in the format (link, text, button_type) print_status = 'Friend' elif status == 'pending-sent-request' : buttons = [( f '/remove-friend/ { oth_user . id } ' , 'Unsend' , 'btn-outline-warning' )] print_status = 'Sent' elif status == 'pending-to-approve' : buttons = [( f '/add-friend/ { oth_user . id } ' , 'Approve' , 'btn-outline-success' ), ( f '/remove-friend/ { oth_user . id } ' , 'Reject' , 'btn-outline-danger' ) ] print_status = 'Pending' else : abort ( 404 , f 'Unknown status { status } ' ) friends . append (( oth_user , print_status , buttons )) # Handle Add user found_users = [] search_form = SearchForm () if search_form . validate_on_submit (): search_str = search_form . text . data result = User . query . filter ( User . username . contains ( search_str ) & ( User . id != ( current_user . get_id ()))) . all () for user in result : status , _ = get_friend_status ( current_user . get_id (), user . id ) if status == 'friend' : buttons = [( f '/remove-friend/ { user . id } ' , 'Remove Friend' , 'btn-outline-danger' )] elif status == 'pending-sent-request' : buttons = [( f '/remove-friend/ { user . id } ' , 'Unsend' , 'btn-outline-warning' )] elif status == 'pending-to-approve' : buttons = [( f '/add-friend/ { user . id } ' , 'Approve' , 'btn-outline-success' ), ( f '/remove-friend/ { user . id } ' , 'Reject' , 'btn-outline-danger' ) ] elif status == 'neutral' : buttons = [( f '/add-friend/ { user . id } ' , 'Add Friend' , 'btn-outline-info' )] else : abort ( 404 , description = f 'Unknown status { status } ' ) found_users . append (( user . username , buttons )) return render_template ( \"my-friends.html\" , friends = friends , search_form = search_form , found_users = found_users )","title":"show_friends()"},{"location":"Code%20Reference/routes.html#myapp.routes.show_notes","text":"Route to view a users notes Source code in myapp/routes.py @myapp_obj . route ( \"/note\" , methods = [ 'GET' , 'POST' ]) @login_required def show_notes (): \"\"\" Route to view a users notes\"\"\" return redirect ( url_for ( 'view_notes' , note_id = 0 )) # note_id 0 indicate no note to view","title":"show_notes()"},{"location":"Code%20Reference/routes.html#myapp.routes.signup","text":"Signup page route Source code in myapp/routes.py @myapp_obj . route ( \"/signup\" , methods = [ 'GET' , 'POST' ]) def signup (): \"\"\"Signup page route\"\"\" if current_user . is_authenticated : return redirect ( url_for ( \"log\" )) form = SignupForm () if form . validate_on_submit (): hashed_password = generate_password_hash ( form . password . data ) user = User ( email = form . email . data , username = form . username . data , password = hashed_password ) db . session . add ( user ) db . session . commit () flash ( \"Your account has been created. You can now login\" ) return redirect ( url_for ( \"home\" )) return render_template ( \"signup.html\" , form = form )","title":"signup()"},{"location":"Code%20Reference/routes.html#myapp.routes.tomato","text":"Show Pomodoro timer route Source code in myapp/routes.py @myapp_obj . route ( \"/pomodoro\" ) def tomato (): \"\"\"Show Pomodoro timer route\"\"\" return render_template ( \"/pomodoro.html\" )","title":"tomato()"},{"location":"Code%20Reference/routes.html#myapp.routes.updateTodo","text":"Mark ToDo item to complete/not complete, then redirect back to show ToDo list Source code in myapp/routes.py @myapp_obj . route ( \"/updateTodo/<int:todo_id>\" ) @login_required def updateTodo ( todo_id ): \"\"\"Mark ToDo item to complete/not complete, then redirect back to show ToDo list\"\"\" todo = Todo . query . filter_by ( id = todo_id , user_id = current_user . get_id ()) . first () todo . complete = not todo . complete db . session . commit () return redirect ( url_for ( \"myTodo\" ))","title":"updateTodo()"},{"location":"Code%20Reference/routes.html#myapp.routes.upload_note","text":"Import note route, for user to import markdown file into note Source code in myapp/routes.py @myapp_obj . route ( \"/upload-note\" , methods = [ 'GET' , 'POST' ]) @login_required def upload_note (): \"\"\"Import note route, for user to import markdown file into note\"\"\" form = UploadMarkdownForm () if form . validate_on_submit (): n = form . file . data filename = n . filename content = n . stream . read () . decode ( 'ascii' ) note = Note ( name = filename , data = content , user_id = current_user . get_id ()) db . session . add ( note ) db . session . commit () flash ( f 'Uploaded note { filename } ' ) return redirect ( url_for ( \"show_notes\" )) return render_template ( \"import-note.html\" , form = form )","title":"upload_note()"},{"location":"Code%20Reference/routes.html#myapp.routes.view_notes","text":"Route to view note, this is similar to show_notes Source code in myapp/routes.py @myapp_obj . route ( \"/viewNote/<int:note_id>\" , methods = [ 'GET' , 'POST' ]) @login_required def view_notes ( note_id ): '''Route to view note, this is similar to show_notes ''' note = None html_text = None posted_notes = [] search_text = request . form . get ( 'text' ) user_id = current_user . get_id () search_form = SearchForm () if search_text : notes = Note . query . filter_by ( user_id = current_user . get_id ()) . filter ( Note . data . contains ( search_text )) . all () if notes : flash ( f ' { len ( notes ) } search results found' ) else : flash ( 'No search results found' , \"error\" ) else : notes = Note . query . filter_by ( user_id = current_user . get_id ()) . all () if note_id != 0 : note = Note . query . filter_by ( id = note_id , user_id = current_user . get_id ()) . one_or_none () html_text = markdown . markdown ( note . data ) for x in notes : posted_notes = posted_notes + [{ 'name' : f ' { x . name } ' , 'id' : f ' { x . id } ' }] return render_template ( 'note.html' , title = 'Note' , posted_notes = posted_notes , note = note , html_text = html_text , user_id = user_id , search_form = SearchForm ())","title":"view_notes()"},{"location":"Flashcards/MarkdownFlashcard.html","text":"Markdown Flashcards For importing flashcard from markdown file, we will uses the specs from Markdown Flashcards here . Although it might not be a public specs for markdown flashcard, it seems pretty reasonable to follow the syntax in there, it was claiming that it could support Quizlet, Anki. Important : Currently, we are ignoring sections name (heading2 starts with ## ), and essentially just parse the flashcards (although the parser already parse them, we need database and visual support for it), that will be a enhancement in possible TODO list. File Format Skeleton The skeleton of the Markdown Flashcard must look like the following: # Markdown Flashcards ## Flashcards (This could be anything for now, it's ignored, we can just name it Flashcards) <cards> The beggining of the file must start with # Markdown Flashcards as a file verification. Each section must be separated with ## <Section name> and followed by its <cards> . Writing cards For this project, we will only be using ? as the separator for <cards> . The two different syntax allowed for markdown are: Individual Card Syntax (line spacings are important): --- front ? back --- Tabular Card Syntax: | Front | Back | | ------- | ------- | | front 1 | back 1 | | front 2 | back 2 | Example A written example is as below, the format can either be like card syntax(in Section 1) or using a quick tabular format(in Section 2): # Markdown Flashcards ## Section 1 --- front 1 ? back 1 --- --- front 2 ? back 2 --- ## Section 2 | Front | Back | | ------- | ------- | | front 3 | back 3 | | front 4 | back 4 | Again, the ## <Section name> (\"Section 1\" and \"Section 2\" name above) information are ignored for now, we only look at the flashcards, so the below gives the exact same result: # Markdown Flashcards ## Flashcards --- front 1 ? back 1 --- --- front 2 ? back 2 --- | Front | Back | | ------- | ------- | | front 3 | back 3 | | front 4 | back 4 |","title":"Markdown Flashcards"},{"location":"Flashcards/MarkdownFlashcard.html#markdown-flashcards","text":"For importing flashcard from markdown file, we will uses the specs from Markdown Flashcards here . Although it might not be a public specs for markdown flashcard, it seems pretty reasonable to follow the syntax in there, it was claiming that it could support Quizlet, Anki. Important : Currently, we are ignoring sections name (heading2 starts with ## ), and essentially just parse the flashcards (although the parser already parse them, we need database and visual support for it), that will be a enhancement in possible TODO list.","title":"Markdown Flashcards"},{"location":"Flashcards/MarkdownFlashcard.html#file-format","text":"","title":"File Format"},{"location":"Flashcards/MarkdownFlashcard.html#skeleton","text":"The skeleton of the Markdown Flashcard must look like the following: # Markdown Flashcards ## Flashcards (This could be anything for now, it's ignored, we can just name it Flashcards) <cards> The beggining of the file must start with # Markdown Flashcards as a file verification. Each section must be separated with ## <Section name> and followed by its <cards> .","title":"Skeleton"},{"location":"Flashcards/MarkdownFlashcard.html#writing-cards","text":"For this project, we will only be using ? as the separator for <cards> . The two different syntax allowed for markdown are: Individual Card Syntax (line spacings are important): --- front ? back --- Tabular Card Syntax: | Front | Back | | ------- | ------- | | front 1 | back 1 | | front 2 | back 2 |","title":"Writing cards"},{"location":"Flashcards/MarkdownFlashcard.html#example","text":"A written example is as below, the format can either be like card syntax(in Section 1) or using a quick tabular format(in Section 2): # Markdown Flashcards ## Section 1 --- front 1 ? back 1 --- --- front 2 ? back 2 --- ## Section 2 | Front | Back | | ------- | ------- | | front 3 | back 3 | | front 4 | back 4 | Again, the ## <Section name> (\"Section 1\" and \"Section 2\" name above) information are ignored for now, we only look at the flashcards, so the below gives the exact same result: # Markdown Flashcards ## Flashcards --- front 1 ? back 1 --- --- front 2 ? back 2 --- | Front | Back | | ------- | ------- | | front 3 | back 3 | | front 4 | back 4 |","title":"Example"}]}